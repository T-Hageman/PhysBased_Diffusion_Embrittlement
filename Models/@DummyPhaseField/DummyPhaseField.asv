classdef DummyPhaseField < BaseModel
    %DummyPhaseField Summary of this class goes here
    %   Detailed explanation goes here
    
    properties
        mesh
        myName
        myGroup
        myGroupIndex
        dofSpace
        dofTypeIndices
        
        l
    end
    
    methods
        function obj = DummyPhaseField(mesh, physics, inputs)
            %% save inputs to object
            obj.myName = "DummyPhaseField";
            disp("Initializing "+obj.myName)
            obj.mesh = mesh;
            obj.myGroup = inputs.Egroup;
            obj.myGroupIndex = obj.mesh.getGroupIndex(obj.myGroup);
            obj.dofSpace = physics.dofSpace;
            
            %% create relevant dofs
            obj.dofTypeIndices = obj.dofSpace.addDofType({"dx","dy","phi"});
            obj.dofSpace.addDofs(obj.dofTypeIndices, obj.mesh.GetAllNodesForGroup(obj.myGroupIndex));
            
            %% get parameters
            obj.l = inputs.l;
        end
        
        function getKf(obj, physics)
            fprintf("        DummyPhaseField get Matrix:")
            t = tic;
            
            dt = physics.dt;

            allNodes = obj.mesh.GetAllNodesForGroup(obj.myGroupIndex);
			newcons = obj.dofSpace.getDofIndices(obj.dofTypeIndices(3), allNodes);
            nodeCons = 0*allNodes;
            for i=1:length(allNodes)
				xy = [obj.mesh.Nodes(allNodes(i),1), obj.mesh.Nodes(allNodes(i),2)];
				
				if (xy(1)<5e-3)
					dst = 5e-3-xy(2);
				else
					dst=sqrt((xy(1)-5e-3)^2+(xy(2)-5e-3)^2);
				end
				
				if (abs(dst)>3*obj.l)
					pf = 0;
				else
					pf = exp(-abs(dst)/(obj.l));
				end
				nodeCons(i) = pf;


            end
            
			physics.condofs = [physics.condofs; newcons];
            physics.convals = [physics.convals; nodeCons];
			physics.StateVec(newcons) = nodeCons;
			physics.StateVec_Old(newcons) = nodeCons;
			physics.PlotNodal("phi",1000, "Internal");
            
            tElapsed = toc(t);
            fprintf("            (Assemble time:"+string(tElapsed)+")\n");
        end

        function [hasInfo, provided] = Provide_Info(obj, physics, var, elems, loc)
           hasInfo = false;
           provided = [];
           
        end
        
    end
end

